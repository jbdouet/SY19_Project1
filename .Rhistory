setwd("~/Documents/GI05/SY19/TPs/TP3/SY19_Project1")
install.packages("xgboost")
data_clas<-read.csv('data/tp3_clas_app.txt',sep=' ')
n= nrow(data_clas)
ntrain=ceiling(n*2/3)
ntst=n-ntrain
train<-sample(1:n,ntrain)
data_clas.test<-data_clas[-train,]
data_clas.train<-data_clas[train,]
library(MASS)
lda.clas<- lda(y~.,data=data_clas.train)
pred.clas<-predict(lda.clas,newdata=data_clas.test, type="response")
table(data_clas.test$y,pred.clas$class)
prop.table(table(data_clas.test$y,pred.clas$class))
cm= as.matrix(table(data_clas.test$y,pred.clas$class))
accuracy = sum(diag(cm)) / sum(cm)
precision = sum(diag(cm)) / apply(cm, 2, sum)
recall =  sum(diag(cm)) /  apply(cm, 1, sum)
f1 = 2 * precision * recall / (precision + recall)
library("pROC")
roc_curve<-roc(data_clas.test$y,as.vector(pred.clas$x))
plot(roc_curve)
library("ROCR")
pr <- prediction(pred.clas$x,data_clas.test$y )
auc <-performance(pr, measure='auc')
auc<- auc@y.values[[1]]
auc
data_clas2.train  <- data_clas.train
data_clas2.test  <- data_clas.test
data_clas2.train$y <- data_clas.train$y-1
data_clas2.test$y <- data_clas.test$y-1
glm.fit<- glm(y~.,data=data_clas2.train,family=binomial)
summary(glm.fit)
pred.clas.glm<-predict(glm.fit,newdata=data_clas2.test)
table(data_clas2.test$y,pred.clas.glm>0.5)
prop.table(table(data_clas2.test$y,pred.clas.glm>0.5))
logit<-predict(glm.fit,newdata=data_clas2.test,type='link')
roc_glm<-roc(data_clas2.test$y,pred.clas.glm)
plot(roc_glm,add=TRUE,col='red')
cm_glm= as.matrix(table(data_clas2.test$y,pred.clas.glm>0.4))
accuracy_glm = sum(diag(cm_glm)) / sum(cm_glm)
precision_glm = sum(diag(cm_glm)) / apply(cm_glm, 2, sum)
recall_glm =  sum(diag(cm_glm)) /  apply(cm_glm, 1, sum)
f1_glm = 2 * precision_glm * recall_glm / (precision_glm + recall_glm)
accuracy_glm
hist(pred.clas.glm, breaks = 50)
cm_glm= as.matrix(table(data_clas2.test$y,pred.clas.glm>0.4))
cm_glm
?glm.fit
table(data_clas2.test$y,pred.clas.glm>0.5)
logit<-predict(glm.fit,newdata=data_clas2.test,type='link')
spam_data<-read.csv('Spam/spambase.dat',sep=' ')
summary(glm.fit)
pred.clas.glm<-predict(glm.fit,newdata=data_clas2.test)
pred.clas.glm
table(data_clas2.test$y,pred.clas.glm>0.5)
data_clas2.test$y
pred.clas.glm>0.5
table(data_clas2.test$y,pred.clas.glm>0) # on definit un threshold pour la classification
pred.clas.glm<-predict(glm.fit,newdata=data_clas2.test, type = "response")
pred.clas.glm
table(data_clas2.test$y,pred.clas.glm>0.5) # on definit un threshold pour la classification
prop.table(table(data_clas2.test$y,pred.clas.glm>0.5))
table(data_clas2.test$y,pred.clas.glm>0) # on definit un threshold pour la classification
prop.table(table(data_clas2.test$y,pred.clas.glm>0.5))
logit<-predict(glm.fit,newdata=data_clas2.test,type='link')
logit
logit<-predict(glm.fit,newdata=data_clas2.test)
logit<-predict(glm.fit,newdata=data_clas2.test)
logiy
logit
logit<-predict(glm.fit,newdata=data_clas2.test,type='link')
logit2<-predict(glm.fit,newdata=data_clas2.test)
logit == logit2
logit === logit2
pred.clas$class
data_clas2.train  <- data_clas.train
data_clas2.test  <- data_clas.test
data_clas2.train$y <- data_clas.train$y-1
data_clas2.test$y <- data_clas.test$y-1
glm.fit<- glm(y~.,data=data_clas2.train,family=binomial)
summary(glm.fit)
pred.clas.glm<-predict(glm.fit,newdata=data_clas2.test, type = "response") # le type response est important pour avoir des probas !
table(data_clas2.test$y,pred.clas.glm>0.5) # on definit un threshold pour la classification
prop.table(table(data_clas2.test$y,pred.clas.glm>0.5))
logit<-predict(glm.fit,newdata=data_clas2.test,type='link')
roc_glm<-roc(data_clas2.test$y,pred.clas.glm)
plot(roc_glm,add=TRUE,col='red')
plot(roc_glm,add=TRUE,col='red')
plot(roc_glm,add=TRUE,col='red')
plot(roc_glm,add=TRUE,col='red')
plot.new()
plot(roc_glm,add=TRUE,col='red')
plot(roc_glm,add=TRUE,col='red')
plot(roc_glm,add=TRUE,col='red')
